name: watch-remote-repo

on:
#  schedule:
#    - cron:  '* */1 * * *'
  push:
    branches:
      - develop
env:
  USER: "kksudo"
  ODYSSEY_GIT_REPO: "yandex/odyssey"
jobs:
    watch-repo:
      runs-on: ubuntu-latest
      steps:
      - name: Checkout repo
        uses: actions/checkout@master
#        TODO: uncomment for debugging session via ssh
#      - name: Setup tmate session
#        uses: mxschmitt/action-tmate@v2
#       touch continue or sudo touch /continue to return job
      - name: Read local env
        id: get_vars
        run: |
          # Get local vars
          vars=$(echo $(cat .github/workflows/env.json))

          echo "::set-output name=_context::$vars"

          echo "vars is => $vars"
          echo "${{ fromJson(cat .github/workflows/env.json).OD_MAIN_COMMIT_ID }}"

          # Get remote vars
          echo ::set-env name=LATEST_RELEASE::$(echo $(curl --silent https://api.github.com/repos/${ODYSSEY_GIT_REPO}/releases/latest | grep '"tag_name":' | cut -d'"' -f4))
          echo ::set-env name=LATEST_MAIN_COMMIT_ID::$(echo $(git ls-remote git://github.com/${ODYSSEY_GIT_REPO}.git HEAD | awk '{ print $1}'))
      - name: Get latest version the remote repository
        run: |
          echo "LATEST_RELEASE=> ${LATEST_RELEASE}, whereas local release is=> ${OD_RELEASE}"
          echo "LATEST_MAIN_COMMIT_ID=> ${LATEST_MAIN_COMMIT_ID}, whereas local release is=> ${OD_MAIN_COMMIT_ID}"


# TODO: Read output context
#        run: |
#          echo "$MY_CONTEXT"
#          echo "${{ fromJson(steps.get_vars.outputs._context).OD_MAIN_COMMIT_ID }}"

# TODO: send event to build new image
#    build-event:
#      needs: watch-repo
#      if: success()
#      runs-on: ubuntu-latest
#      steps:
#      - name: Repository Dispatch
#        uses: peter-evans/repository-dispatch@v1
#        with:
#          token: ${{ secrets.GH_TOKEN }}
#          event-type: build
#          client-payload: '{"ref": "${{ github.ref }}", "sha": "${{ github.sha }}"}'